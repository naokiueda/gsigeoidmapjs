using System;
using System.IO;

namespace gsigeoid2Js
{
    class Program
    {

        static void Main(string[] args)
        {
            if (args.Length != 1)
            {
                Console.WriteLine("Usage: gsigeois2js.exe gsigeo2011_ver2.asc");
                return;
            }
            string soruceGeoidFile = AppDomain.CurrentDomain.SetupInformation.ApplicationBase+"\\"+args[0];

            if (!System.IO.File.Exists(soruceGeoidFile))
            {
                return;
            }
            using (StreamReader geoidascii = new StreamReader(args[0]))
            using(StreamWriter geoidjs = new StreamWriter(System.IO.Path.GetDirectoryName(soruceGeoidFile)+"\\gsigeoidmap.js"))
            {
                //Header
                string[] header = geoidascii.ReadLine().Trim().Split(' ');
                geoidjs.WriteLine("//Gsi Geoid Map generated by \"gsigeois2Js\" ");
                geoidjs.WriteLine("//Source Data: " + System.IO.Path.GetFileName(args[0]));
                geoidjs.WriteLine("var GsiGeoid = function(){");

                geoidjs.WriteLine("this.getGeoid=function(lat, lon){");
                geoidjs.WriteLine("  var glamn = " + double.Parse(header[0]) + ";");
                geoidjs.WriteLine("  var glomn = " + double.Parse(header[1]) + ";");
                geoidjs.WriteLine("  var dgla = " + double.Parse(header[2]) + ";");
                geoidjs.WriteLine("  var dglo = " + double.Parse(header[3]) + ";");
                int nla = int.Parse(header[4]);
                int nlo = int.Parse(header[5]);
                geoidjs.WriteLine("  var nla = " + nla + ";");
                geoidjs.WriteLine("  var nlo = " + nlo + ";");
                geoidjs.WriteLine(
@"if (lat < glamn || lat > glamn + dgla * (nla -1) || lon < glomn || lon > glomn + dglo * (nlo -1))
  {
    return 0;
  }
  var j = Math.floor((lon - glomn) / dglo);
  var i = Math.floor((lat - glamn) / dgla);
  var a = this.geoidMap['' + (i) + '_' + (j) + ''];
  var b = this.geoidMap['' + (i) + '_' + (j+1) + ''];
  var c = this.geoidMap['' + (i+1) + '_' + (j) + ''];
  var d = this.geoidMap['' + (i+1) + '_' + (j+1) + ''];
  if(a==null || b==null || c==null || d==null)
  {
    return 0;
  }
  var wlon = glomn + j * dglo;
  var elon = glomn + (j+1) * dglo;
  var slat = glamn + i * dgla;
  var nlat = glamn + (i+1) * dgla;
  var t = (lat - slat) / (nlat - slat);
  var u = (lon - wlon) / (elon - wlon);
  var Z = (1 - t) * (1 - u) * a + (1 - t) * u * b + t * (1 - u) * c + t * u * d;  Z *= 100000;
  Z = Math.floor(Z + 0.5);
  Z /= 100000;
  return Z;
}");

                geoidjs.WriteLine("  this.geoidMap ={");
                int la = 0, lo = 0;
                int row = 0;
                while (geoidascii.Peek() > -1)
                {
                    string[] g = geoidascii.ReadLine().Trim().Split(' ');
                    for (int i = 0; i < g.Length; i++)
                    {
                        if (g[i].Trim() == "")
                        {
                            continue;
                        }
                        double val = double.Parse(g[i]);
                        if (val != 999.000)
                        {
                            geoidjs.Write("\"" + la + "_" + lo + "\":" + val + ",");
                            row++;
                            if (row % 200 == 0)
                            {
                                row = 0;
                                geoidjs.WriteLine("");
                            }
                        }
                        lo++;
                        if (lo == nlo)
                        {
                            lo = 0;
                            la++;
                        }
                    }
                }
                geoidjs.WriteLine("\"empty\":0");
                geoidjs.WriteLine("};}");


                geoidjs.Close();
                geoidascii.Close();
            }
        }
    }


}
